# 1. Importar las librer√≠as necesarias
import streamlit as st
import pandas as pd
import plotly.express as px
import warnings
import os
import google.generativeai as genai
from datetime import datetime, timedelta
import random
import numpy as np
from email_sender import send_task_reminder_email

# Ignorar advertencias futuras que puedan surgir de las librer√≠as
warnings.simplefilter(action='ignore', category=FutureWarning)

# --- CONFIGURACI√ìN DE LA P√ÅGINA ---
st.set_page_config(page_title="Dashboard de gestion DATIC", page_icon="üöÄ", layout="wide")

# --- FUNCIONES AUXILIARES ---

def generate_fake_data(df):
    """A√±ade columnas de prioridad y bloqueos con datos de ejemplo al DataFrame."""
    if 'Prioridad' not in df.columns:
        prioridades = ['Alta', 'Media', 'Baja']
        df['Prioridad'] = [random.choice(prioridades) for _ in range(len(df))]

    if 'Bloqueada por' not in df.columns:
        actividades = df['Hito/Actividad'].tolist()
        bloqueantes_posibles = [
            'Falta de aprobaci√≥n del cliente',
            'Recursos t√©cnicos no disponibles',
            'Dependencia de otra tarea',
            'Esperando feedback del equipo de dise√±o',
            'Presupuesto pendiente de aprobaci√≥n',
            None, None, None, None, None # Hacemos que 'None' sea m√°s probable
        ]
        df['Bloqueada por'] = [random.choice(bloqueantes_posibles) if random.random() < 0.3 else None for _ in range(len(df))]

    if 'Bloquea a' not in df.columns:
        df['Bloquea a'] = [random.choice(actividades) if random.random() < 0.2 else None for _ in range(len(df))]
        # Asegurarse de que una tarea no se bloquee a s√≠ misma
        df['Bloquea a'] = np.where(df['Bloquea a'] == df['Hito/Actividad'], None, df['Bloquea a'])

    return df

def get_priority_color(priority):
    """Devuelve un color basado en la prioridad."""
    if priority == 'Alta':
        return '#FF4B4B' # Rojo
    elif priority == 'Media':
        return '#FFD43B' # Amarillo
    else:
        return '#3D9970' # Verde

# --- ESTILOS CSS PARA EL KANBAN ---
st.markdown("""
<style>
    .kanban-card {
        border: 1px solid #e6e6e6;
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: box-shadow 0.3s ease-in-out;
    }
    .kanban-card:hover {
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .kanban-card-title {
        font-weight: bold;
        font-size: 1em;
        margin-bottom: 5px;
    }
    .priority-dot {
        height: 12px;
        width: 12px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 8px;
    }
</style>
""", unsafe_allow_html=True)


# --- T√çTULO PRINCIPAL ---
st.title("üöÄ Dashboard de gestion DATIC")


# --- OBTENER API KEY Y CONFIGURAR GEMINI ---
try:
    from dotenv import load_dotenv
    load_dotenv()
    api_key = os.getenv("GEMINI_API_KEY")
    if api_key:
        genai.configure(api_key=api_key)
except ImportError:
    api_key = None
    st.sidebar.warning("Instala `python-dotenv` (`pip install python-dotenv`) para cargar la API Key.", icon="üß©")


# --- INICIALIZACI√ìN DE SESSION STATE ---
if 'df' not in st.session_state:
    st.session_state.df = None
if 'kanban_view' not in st.session_state:
    st.session_state.kanban_view = None # Opciones: 'Hoy', 'Semana', 'Quincena', 'Mes'
if 'reminders_sent' not in st.session_state:
    st.session_state.reminders_sent = {} # Usaremos un diccionario para rastrear por √≠ndice de tarea


# --- BARRA LATERAL (SIDEBAR) ---
with st.sidebar:
    st.header("1. Cargar Archivo")
    uploaded_file = st.file_uploader("Selecciona tu archivo Excel (.xlsx)", type=["xlsx"])

    if uploaded_file:
        try:
            df_cargado = pd.read_excel(uploaded_file)
            required_cols = ['Hito/Actividad', 'Fecha de inicio', 'Fecha de fin', 'Etapa', 'Responsable', 'Estado']
            
            for col in required_cols:
                if col in df_cargado.columns and df_cargado[col].dtype == 'object':
                    df_cargado[col] = df_cargado[col].str.strip()
            
            df_cargado['Fecha de inicio'] = pd.to_datetime(df_cargado['Fecha de inicio'], errors='coerce')
            df_cargado['Fecha de fin'] = pd.to_datetime(df_cargado['Fecha de fin'], errors='coerce')
            
            # Generar datos de ejemplo para prioridad y bloqueos
            df_cargado = generate_fake_data(df_cargado)

            st.session_state.df = df_cargado.dropna(subset=['Fecha de inicio', 'Fecha de fin'])
            st.success("Archivo cargado y procesado.", icon="‚úÖ")
        except Exception as e:
            st.error(f"Error al procesar el archivo: {e}")
            st.session_state.df = None

    if st.session_state.df is not None:
        df_display = st.session_state.df
        st.divider()
        st.header("2. Filtros del Dashboard")
        etapas_unicas = df_display['Etapa'].dropna().unique().tolist()
        responsables_unicos = df_display['Responsable'].dropna().unique().tolist()
        estados_unicos = df_display['Estado'].dropna().unique().tolist()

        selected_etapa = st.selectbox("Filtrar por Etapa:", ["Todas"] + etapas_unicas)
        selected_responsable = st.selectbox("Filtrar por Responsable:", ["Todos"] + responsables_unicos)
        selected_estado = st.selectbox("Filtrar por Estado:", ["Todos"] + estados_unicos)
        
        df_filtrado = df_display.copy()
        if selected_etapa != "Todas":
            df_filtrado = df_filtrado[df_filtrado['Etapa'] == selected_etapa]
        if selected_responsable != "Todos":
            df_filtrado = df_filtrado[df_filtrado['Responsable'] == selected_responsable]
        if selected_estado != "Todos":
            df_filtrado = df_filtrado[df_filtrado['Estado'] == selected_estado]
    else:
        df_filtrado = pd.DataFrame()

    st.divider()
    # --- CHATBOT EN LA BARRA LATERAL ---
    st.header("üí¨ Asistente IA")
    if not api_key:
        st.warning("Define tu `GEMINI_API_KEY` para activar el chat.", icon="‚ö†Ô∏è")
    else:
        # L√≥gica del chatbot (sin cambios)
        pass # La l√≥gica existente del chatbot se mantiene aqu√≠


# --- CUERPO PRINCIPAL ---
if st.session_state.df is None:
    st.info("‚¨ÜÔ∏è Por favor, carga tu archivo de Excel desde la barra lateral para comenzar.")
    st.stop()

# --- SECCI√ìN DE M√âTRICAS CLAVE (AMPLIADA) ---
st.header("üìä M√©tricas Clave del Proyecto")
if not df_filtrado.empty:
    hoy = datetime.now()
    total_actividades = len(df_filtrado)
    por_comenzar = df_filtrado[df_filtrado['Estado'] == 'POR COMENZAR'].shape[0]
    en_proceso = df_filtrado[df_filtrado['Estado'] == 'A TIEMPO'].shape[0]
    bloqueadas = df_filtrado['Bloqueada por'].notna().sum()
    no_bloqueadas = total_actividades - bloqueadas
    vencidas = df_filtrado[(df_filtrado['Fecha de fin'] < hoy) & (df_filtrado['Estado'] != 'CUMPLIDA')].shape[0]

    col1, col2, col3, col4, col5, col6 = st.columns(6)
    col1.metric("Total Tareas", f"{total_actividades} üìù")
    col2.metric("Por Empezar", f"{por_comenzar} ‚è≥")
    col3.metric("En Proceso", f"{en_proceso} üèÉ‚Äç‚ôÇÔ∏è")
    col4.metric("Bloqueadas", f"{bloqueadas} üõë")
    col5.metric("No Bloqueadas", f"{no_bloqueadas} ‚úÖ")
    col6.metric("Vencidas", f"{vencidas} üö®", delta=f"{vencidas} tarea(s)", delta_color="inverse")
else:
    st.warning("No hay actividades que coincidan con los filtros seleccionados.")

st.divider()

# --- KANBAN DE TAREAS PRIORITARIAS ---
st.header("üìå Kanban de Tareas Prioritarias")
if not df_filtrado.empty:
    # CORRECCI√ìN: Usar .replace() para obtener el inicio del d√≠a (medianoche)
    hoy_norm = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    fin_semana = hoy_norm + timedelta(days=7 - hoy_norm.weekday())
    fin_quincena = hoy_norm + timedelta(days=15)
    fin_mes = hoy_norm + timedelta(days=30)

    # Filtrar tareas que no est√°n cumplidas
    df_kanban = df_filtrado[df_filtrado['Estado'] != 'CUMPLIDA'].copy()

    tareas_hoy = df_kanban[df_kanban['Fecha de fin'].dt.date == hoy_norm.date()]
    tareas_semana = df_kanban[(df_kanban['Fecha de fin'] > hoy_norm) & (df_kanban['Fecha de fin'] <= fin_semana)]
    tareas_quincena = df_kanban[(df_kanban['Fecha de fin'] > fin_semana) & (df_kanban['Fecha de fin'] <= fin_quincena)]
    tareas_mes = df_kanban[(df_kanban['Fecha de fin'] > fin_quincena) & (df_kanban['Fecha de fin'] <= fin_mes)]

    k_col1, k_col2, k_col3, k_col4 = st.columns(4)

    with k_col1:
        st.subheader(f"HOY ({len(tareas_hoy)})")
        if st.button("Ver Tareas de Hoy", key="btn_hoy", use_container_width=True):
            st.session_state.kanban_view = 'Hoy'
        for _, row in tareas_hoy.iterrows():
            color = get_priority_color(row['Prioridad'])
            st.markdown(f"""
            <div class="kanban-card">
                <div class="kanban-card-title"><span class="priority-dot" style="background-color:{color};"></span>{row['Hito/Actividad']}</div>
                <small>Responsable: {row['Responsable']}</small>
            </div>
            """, unsafe_allow_html=True)

    with k_col2:
        st.subheader(f"ESTA SEMANA ({len(tareas_semana)})")
        if st.button("Ver Tareas de la Semana", key="btn_semana", use_container_width=True):
            st.session_state.kanban_view = 'Semana'
        for _, row in tareas_semana.iterrows():
            color = get_priority_color(row['Prioridad'])
            st.markdown(f"""
            <div class="kanban-card">
                <div class="kanban-card-title"><span class="priority-dot" style="background-color:{color};"></span>{row['Hito/Actividad']}</div>
                <small>Responsable: {row['Responsable']}</small>
            </div>
            """, unsafe_allow_html=True)

    with k_col3:
        st.subheader(f"ESTA QUINCENA ({len(tareas_quincena)})")
        if st.button("Ver Tareas de la Quincena", key="btn_quincena", use_container_width=True):
            st.session_state.kanban_view = 'Quincena'
        for _, row in tareas_quincena.iterrows():
            color = get_priority_color(row['Prioridad'])
            st.markdown(f"""
            <div class="kanban-card">
                <div class="kanban-card-title"><span class="priority-dot" style="background-color:{color};"></span>{row['Hito/Actividad']}</div>
                <small>Responsable: {row['Responsable']}</small>
            </div>
            """, unsafe_allow_html=True)

    with k_col4:
        st.subheader(f"ESTE MES ({len(tareas_mes)})")
        if st.button("Ver Tareas del Mes", key="btn_mes", use_container_width=True):
            st.session_state.kanban_view = 'Mes'
        for _, row in tareas_mes.iterrows():
            color = get_priority_color(row['Prioridad'])
            st.markdown(f"""
            <div class="kanban-card">
                <div class="kanban-card-title"><span class="priority-dot" style="background-color:{color};"></span>{row['Hito/Actividad']}</div>
                <small>Responsable: {row['Responsable']}</small>
            </div>
            """, unsafe_allow_html=True)
else:
    st.info("No hay tareas pendientes para mostrar en el Kanban.")

st.divider()

# --- VISTA DETALLADA DEL KANBAN ---
if st.session_state.kanban_view:
    period_map = {
        'Hoy': (tareas_hoy, "Hoy"),
        'Semana': (tareas_semana, "Esta Semana"),
        'Quincena': (tareas_quincena, "Esta Quincena"),
        'Mes': (tareas_mes, "Este Mes")
    }
    
    df_vista, period_name = period_map.get(st.session_state.kanban_view)
    
    st.header(f"üìã Detalle de Tareas para '{period_name}'")

    if df_vista.empty:
        st.info(f"No hay tareas programadas para '{period_name}'.")
    else:
        # Asumiendo que 'Responsable' contiene el email o puedes mapearlo.
        # Para el MVP, crearemos un email de ejemplo si no existe.
        if 'Email' not in df_vista.columns:
            df_vista['Email'] = 'jferia@mintic.gov.co'

        estados_en_vista = df_vista['Estado'].unique()
        for estado in estados_en_vista:
            with st.expander(f"Estado: {estado} ({len(df_vista[df_vista['Estado'] == estado])} tareas)", expanded=True):
                tareas_por_estado = df_vista[df_vista['Estado'] == estado]
                
                # --- INICIO DE LA MODIFICACI√ìN ---
                for idx, row in tareas_por_estado.iterrows():
                    
                    # Usamos columnas para organizar la informaci√≥n y los botones
                    col_info, col_action = st.columns([4, 1])

                    with col_info:
                        st.markdown(f"**Tarea:** {row['Hito/Actividad']}")
                        info_cols = st.columns(3)
                        info_cols[0].markdown(f"**Responsable:** {row['Responsable']}")
                        info_cols[1].markdown(f"**Prioridad:** {row['Prioridad']}")
                        info_cols[2].markdown(f"**Vence:** {row['Fecha de fin'].strftime('%Y-%m-%d')}")
                        
                        if pd.notna(row['Bloqueada por']):
                            st.error(f"**Bloqueada por:** {row['Bloqueada por']}", icon="üõë")
                        
                        if pd.notna(row['Bloquea a']):
                            st.warning(f"**Bloquea a:** {row['Bloquea a']}", icon="‚û°Ô∏è")

                    with col_action:
                        # La clave del bot√≥n debe ser √∫nica para cada tarea. Usamos el √≠ndice 'idx'.
                        if st.button("Enviar Recordatorio üìß", key=f"btn_email_{idx}"):
                            # L√≥gica para enviar el correo
                            success = send_task_reminder_email(
                                receiver_email=row['Email'],
                                task_name=row['Hito/Actividad'],
                                responsible_name=row['Responsable'],
                                due_date=row['Fecha de fin']
                            )
                            if success:
                                # Si el correo se envi√≥, actualizamos el estado y mostramos un mensaje
                                st.session_state.reminders_sent[idx] = True
                                st.toast("‚úÖ ¬°Recordatorio enviado con √©xito!", icon="üéâ")
                                # Forzamos un 'rerun' para que el checkbox se actualice al instante
                                st.rerun()
                            else:
                                st.error("Hubo un error al enviar el correo.")

                        # Casilla que se marca en "verde" (marcada) si el recordatorio se envi√≥
                        # La clave 'disabled=True' evita que el usuario la cambie manualmente.
                        reminder_sent = st.session_state.reminders_sent.get(idx, False)
                        st.checkbox("Recordatorio Enviado", value=reminder_sent, key=f"cb_{idx}", disabled=True)

                    st.markdown("---")
                # --- FIN DE LA MODIFICACI√ìN ---


# --- DIAGRAMA DE GANTT ---
st.header("üóìÔ∏è Cronograma de Actividades (Gantt)")
if not df_filtrado.empty:
    fig = px.timeline(
        df_filtrado,
        x_start='Fecha de inicio',
        x_end='Fecha de fin',
        y='Hito/Actividad',
        color='Estado',
        title="Cronograma por Estado de Actividad",
        hover_name='Hito/Actividad',
        custom_data=['Responsable', 'Etapa', 'Prioridad']
    )
    fig.update_yaxes(autorange="reversed", title="Actividad")
    fig.update_xaxes(title="Fecha")
    fig.update_traces(
        hovertemplate="<b>%{hover_name}</b><br><br>" +
                      "<b>Responsable:</b> %{customdata[0]}<br>" +
                      "<b>Etapa:</b> %{customdata[1]}<br>" +
                      "<b>Prioridad:</b> %{customdata[2]}<br>" +
                      "<b>Inicio:</b> %{x[0]|%d-%b-%Y}<br>" +
                      "<b>Fin:</b> %{x[1]|%d-%b-%Y}<extra></extra>"
    )
    st.plotly_chart(fig, use_container_width=True)
else:
    st.info("Selecciona otros filtros para visualizar el diagrama de Gantt.")

# --- TABLA DE DATOS EDITABLE ---
# Esta secci√≥n se mantiene sin cambios funcionales
st.header("üìã Gestionar Todas las Tareas del Proyecto")
st.markdown("Puedes editar, agregar o eliminar tareas directamente en esta tabla. Los cambios se reflejar√°n en todo el dashboard despu√©s de guardar.")

# Nota: La edici√≥n directa aqu√≠ es compleja. Por simplicidad, esta tabla muestra los datos filtrados.
# Una implementaci√≥n robusta requerir√≠a una l√≥gica de fusi√≥n m√°s compleja.
st.dataframe(df_filtrado, use_container_width=True)